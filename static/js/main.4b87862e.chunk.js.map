{"version":3,"sources":["api/api.ts","redux/tableReducer.ts","components/Paginator/Paginator.tsx","components/Search/TableSearch.tsx","components/UserInfo/UserInfo.tsx","components/DataSelector/DataSelector.tsx","components/AddNewUserForm/AddNewUserForm.tsx","components/UsersTable/UsersTable.tsx","App.tsx","reportWebVitals.ts","redux/redux-store.ts","index.tsx"],"names":["tableAPI","axios","get","initialState","tableData","displayTableData","isTableLoading","pageSize","totalUsersCount","currentPage","search","selectedUserData","isDataSelected","isAddNewUserFormVisible","someError","setTableData","type","setDisplayTableData","newDisplayTableData","setIsTableLoading","setTotalUsersCount","TotalUsersCount","setIsDataSelected","setSomeError","error","Paginator","props","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","portionSize","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","style","textAlign","onClick","disabled","filter","p","map","index","onPageChanged","TableSearch","searchText","setSearchText","Search","placeholder","onSearch","enterButton","value","onChange","e","currentTarget","UserInfo","user","userData","firstName","lastName","description","readOnly","address","streetAddress","city","state","zip","DataSelector","dispatch","useDispatch","then","res","data","length","catch","err","finally","validate","values","errors","id","test","email","phone","AddNewUserForm","formik","useFormik","initialValues","onSubmit","newUser","onFinish","handleSubmit","layout","size","Item","label","validateStatus","touched","handleChange","onBlur","handleBlur","color","htmlType","isValid","UsersTable","useSelector","table","columns","title","dataIndex","key","sorter","a","b","stringSorterFunction","useCallback","pageNumber","setCurrentPage","toLowerCase","includes","onAddUserClick","setIsAddNewUserFormVisible","status","subTitle","extra","display","justifyContent","marginTop","dataSource","rowKey","pagination","onRow","record","rowIndex","event","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","newD","slice","Number","newTableData","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2SAEaA,EAAW,WAGhB,OAAOC,IAAMC,IAAI,4NAHZF,EAAW,WAOhB,OAAOC,IAAMC,IAAI,oMCqBnBC,EAAe,CAEjBC,UAAW,GAEXC,iBAAkB,GAClBC,gBAAgB,EAChBC,SAAU,GACVC,gBAAiB,EACjBC,YAAa,EAEbC,OAAQ,GAERC,iBAAkB,KAElBC,gBAAgB,EAChBC,yBAAyB,EACzBC,WAAW,GAkEFC,EAAe,SAACX,GACzB,MAAO,CAACY,KAAM,iBAAkBZ,cAEvBa,EAAsB,SAACC,GAChC,MAAO,CAACF,KAAM,yBAA0BE,wBAE/BC,EAAoB,SAACb,GAC9B,MAAO,CAACU,KAAM,uBAAwBV,mBAE7Bc,EAAqB,SAACC,GAC/B,MAAO,CAACL,KAAM,wBAAyBK,oBAW9BC,EAAoB,SAACV,GAC9B,MAAO,CAACI,KAAM,uBAAwBJ,mBAkB7BW,EAAe,SAACC,GACzB,MAAO,CAACR,KAAM,iBAAkBQ,U,eC9IvBC,EAA0C,SAACC,GAKpD,IAHA,IAAIC,EAAaC,KAAKC,KAAKH,EAAMI,gBAAkBJ,EAAMnB,UAErDwB,EAAQ,GACHC,EAAI,EAAGA,GAAKL,EAAYK,IAC7BD,EAAME,KAAKD,GAGf,IAAIE,EAAeN,KAAKC,KAAKF,EAAaD,EAAMS,aATc,EAUtBC,mBAAS,GAVa,mBAUzDC,EAVyD,KAU1CC,EAV0C,KAW1DC,GAAyBF,EAAgB,GAAKX,EAAMS,YAAc,EAClEK,EAAyBH,EAAgBX,EAAMS,YAEnD,OACI,sBAAKM,MAAO,CAACC,UAAW,UAAxB,UACI,cAAC,IAAD,CAAQC,QAAS,WACbL,EAAiBD,EAAgB,IAE7BO,SAA4B,IAAlBP,EAHlB,kBAKCN,EACIc,QAAO,SAAAC,GAAC,OAAIA,GAAKP,GAAyBO,GAAKN,KAC/CO,KAAI,SAACD,EAAGE,GAAJ,OACD,cAAC,IAAD,CAAoBhC,KAAM8B,IAAMpB,EAAMjB,YAAc,UAAY,UACvDkC,QAAS,WACdjB,EAAMuB,cAAcH,IAFxB,SAGIA,GAHSE,MAKrB,cAAC,IAAD,CAAQL,QAAS,WACbL,EAAiBD,EAAgB,IAE7BO,SAAUP,IAAkBH,EAHpC,sB,QCjCCgB,EAAc,SAACxB,GAA4B,IAAD,EAEjBU,mBAAiB,IAFA,mBAE9Ce,EAF8C,KAElCC,EAFkC,KAQnD,OACI,8BACI,cAACC,EAAA,EAAD,CAAQC,YAAY,SAASC,SAAU7B,EAAM6B,SACrCC,aAAW,EAACC,MAAON,EAAYO,SAPnB,SAACC,GACzBP,EAAcO,EAAEC,cAAcH,aCLzBI,EAAW,SAACnC,GAErB,IAAIoC,EAAI,eAAOpC,EAAMqC,UAErB,OACI,gCACI,+IAAuB,sCAAOD,EAAKE,UAAZ,YAAyBF,EAAKG,eACrD,kFACA,4BAAG,0BAAUR,MAAOK,EAAKI,YAAaC,UAAQ,MAC9C,8HAAqB,4BAAIL,EAAKM,QAAQC,mBACtC,iEAAU,4BAAIP,EAAKM,QAAQE,UAC3B,kHAAmB,4BAAIR,EAAKM,QAAQG,WACpC,uEAAW,4BAAIT,EAAKM,QAAQI,aCd3BC,EAAe,WACxB,IAAMC,EAAWC,cAWjB,OACI,sBAAKlC,MAAO,CAACC,UAAW,UAAxB,UACI,+CACA,cAAC,IAAD,CAAQC,QAZQ,WACpB+B,EAASpD,GAAkB,IAC3BoD,GJkJuC,SAACA,GAC5CA,EAASvD,GAAkB,IAC3BnB,IACK4E,MAAK,SAACC,GACHH,EAAS3D,EAAa8D,EAAIC,OAC1BJ,EAAStD,EAAmByD,EAAIC,KAAKC,SACrCL,EAASzD,QAEZ+D,OAAM,SAACC,GACJP,EAASnD,GAAa,OAEzB2D,SAAQ,WACLR,EAASvD,GAAkB,WIpJ3B,mBACA,cAAC,IAAD,CAAQwB,QATM,WAClB+B,EAASpD,GAAkB,IAC3BoD,GJ8JqC,SAACA,GAC1CA,EAASvD,GAAkB,IAC3BnB,IACK4E,MAAK,SAACC,GACHH,EAAS3D,EAAa8D,EAAIC,OAC1BJ,EAAStD,EAAmByD,EAAIC,KAAKC,SACrCL,EAASzD,QAEZ+D,OAAM,SAACC,GACJP,EAASnD,GAAa,OAEzB2D,SAAQ,WACLR,EAASvD,GAAkB,WInK3B,qB,2BCPNgE,EAAW,SAACC,GACd,IAAMC,EAAS,GA+Bf,OA9BKD,EAAOE,GAED,KAAKC,KAAKH,EAAOE,MACxBD,EAAOC,GAAK,kCAFZD,EAAOC,GAAK,WAKXF,EAAOpB,UAED,YAAYuB,KAAKH,EAAOpB,aAC/BqB,EAAOrB,UAAY,gDAFnBqB,EAAOrB,UAAY,WAKlBoB,EAAOnB,SAED,YAAYsB,KAAKH,EAAOnB,YAC/BoB,EAAOpB,SAAW,+CAFlBoB,EAAOpB,SAAW,WAKjBmB,EAAOI,MAEA,4CAA4CD,KAAKH,EAAOI,SAChEH,EAAOG,MAAQ,yBAFfH,EAAOG,MAAQ,WAKdJ,EAAOK,MAEA,uBAAuBF,KAAKH,EAAOK,SAC3CJ,EAAOI,MAAQ,iCAFfJ,EAAOI,MAAQ,WAKZJ,GAIEK,EAAiB,WAC1B,IAAMhB,EAAWC,cAEXgB,EAASC,YAAU,CACrBC,cAAe,CACXP,GAAI,GACJtB,UAAW,GACXC,SAAU,GACVuB,MAAO,GACPC,MAAO,IAEXN,WACAW,SAAU,SAAAV,GACNV,ELsFD,CAAC1D,KAAM,eAAgB+E,QKtFFX,OAM5B,OACI,8BACI,eAAC,IAAD,CAAMY,SAAUL,EAAOM,aAAcC,OAAO,aAAaC,KAAK,QAA9D,UACI,eAAC,IAAKC,KAAN,CAAWC,MAAM,KAAKC,eAAgBX,EAAOY,QAAQjB,IAAMK,EAAON,OAAOC,GAAK,QAAU,GAAxF,UACI,cAAC,IAAD,CACIA,GAAG,KACHtE,KAAK,OACL0C,SAAUiC,EAAOa,aACjBC,OAAQd,EAAOe,WACfjD,MAAOkC,EAAOP,OAAOE,KAExBK,EAAOY,QAAQjB,IAAMK,EAAON,OAAOC,GAAK,qBAAK7C,MAAO,CAACkE,MAAO,OAApB,SAA6BhB,EAAON,OAAOC,KAAY,QAEpG,eAAC,IAAKc,KAAN,CAAWC,MAAM,aAAaC,eAAgBX,EAAOY,QAAQvC,WAAa2B,EAAON,OAAOrB,UAAY,QAAU,GAA9G,UACI,cAAC,IAAD,CACIsB,GAAG,YACHtE,KAAK,OACL0C,SAAUiC,EAAOa,aACjBC,OAAQd,EAAOe,WACfjD,MAAOkC,EAAOP,OAAOpB,YAExB2B,EAAOY,QAAQvC,WAAa2B,EAAON,OAAOrB,UAAY,qBAAKvB,MAAO,CAACkE,MAAO,OAApB,SAA6BhB,EAAON,OAAOrB,YAAmB,QAEzH,eAAC,IAAKoC,KAAN,CAAWC,MAAM,YAAYC,eAAgBX,EAAOY,QAAQtC,UAAY0B,EAAON,OAAOpB,SAAW,QAAU,GAA3G,UACI,cAAC,IAAD,CACIqB,GAAG,WACHtE,KAAK,OACL0C,SAAUiC,EAAOa,aACjBC,OAAQd,EAAOe,WACfjD,MAAOkC,EAAOP,OAAOnB,WAExB0B,EAAOY,QAAQtC,UAAY0B,EAAON,OAAOpB,SAAW,qBAAKxB,MAAO,CAACkE,MAAO,OAApB,SAA6BhB,EAAON,OAAOpB,WAAkB,QAEtH,eAAC,IAAKmC,KAAN,CAAWC,MAAM,QAAQC,eAAgBX,EAAOY,QAAQf,OAASG,EAAON,OAAOG,MAAQ,QAAU,GAAjG,UACI,cAAC,IAAD,CACIF,GAAG,QACHtE,KAAK,QACL0C,SAAUiC,EAAOa,aACjBC,OAAQd,EAAOe,WACfjD,MAAOkC,EAAOP,OAAOI,QAExBG,EAAOY,QAAQf,OAASG,EAAON,OAAOG,MAAQ,qBAAK/C,MAAO,CAACkE,MAAO,OAApB,SAA6BhB,EAAON,OAAOG,QAAe,QAE7G,eAAC,IAAKY,KAAN,CAAWC,MAAM,QAAQC,eAAgBX,EAAOY,QAAQd,OAASE,EAAON,OAAOI,MAAQ,QAAU,GAAjG,UACI,cAAC,IAAD,CACIH,GAAG,QACHtE,KAAK,OACL0C,SAAUiC,EAAOa,aACjBC,OAAQd,EAAOe,WACfjD,MAAOkC,EAAOP,OAAOK,QAExBE,EAAOY,QAAQd,OAASE,EAAON,OAAOI,MAAQ,qBAAKhD,MAAO,CAACkE,MAAO,OAApB,SAA6BhB,EAAON,OAAOI,QAAe,QAE7G,cAAC,IAAKW,KAAN,UACI,cAAC,IAAD,CAAQpF,KAAK,UAAU4F,SAAS,SAAShE,UAAW+C,EAAOkB,QAA3D,yBCzFPC,EAAa,WACtB,IAAMpC,EAAWC,cAEb7D,EAAYiG,aAAuC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAMlG,aAGxER,EAAiByG,aAAuC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAM1G,kBAG7EF,EAAY2G,aAA+C,SAAAxC,GAAK,OAAIA,EAAMyC,MAAM5G,aAC9E6G,EAAU,CACZ,CACIC,MAAO,KACPC,UAAW,KACXC,IAAK,KACLC,OAAQ,SAACC,EAAaC,GAAd,OAA8BD,EAAEhC,GAAKiC,EAAEjC,KAEnD,CACI4B,MAAO,aACPC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACC,EAAaC,GAClB,OAAOC,EAAqBF,EAAEtD,UAAWuD,EAAEvD,aAGnD,CACIkD,MAAO,YACPC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAACC,EAAaC,GAClB,OAAOC,EAAqBF,EAAErD,SAAUsD,EAAEtD,YAGlD,CACIiD,MAAO,QACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACC,EAAaC,GAClB,OAAOC,EAAqBF,EAAE9B,MAAO+B,EAAE/B,SAG/C,CACI0B,MAAO,QACPC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACC,EAAaC,GAClB,OAAOC,EAAqBF,EAAE7B,MAAO8B,EAAE9B,UAK/CpF,EAAmB0G,aAA+C,SAAAxC,GAAK,OAAIA,EAAMyC,MAAM3G,oBAEvFG,EAAkBuG,aAAsC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAMxG,mBAC7ED,EAAWwG,aAAsC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAMzG,YACtEE,EAAcsG,aAAsC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAMvG,eAEzEE,EAAmBoG,aAAwC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAMrG,oBAG9E6G,EAAuB,SAACF,EAAWC,GACrC,OAAID,EAAIC,EACG,EAEPD,EAAIC,GACI,EAEL,GAILtE,EAAgBwE,uBAAY,SAACC,GAC/BhD,ENkBsB,SAACjE,GAC3B,MAAO,CAACO,KAAM,mBAAoBP,eMnBrBkH,CAAeD,IACxBhD,EAASzD,OACV,CAACyD,IAGEnB,EAAWkE,uBAAY,SAAChE,GAC1BiB,ENgBG,CAAC1D,KAAM,SAAUN,OMhBJ+C,IAChB,IAAIvC,EAAsBd,EAAUyC,QAAO,SAAAiB,GACvC,OAAOA,EAAKE,UAAU4D,cAAcC,SAASpE,EAAMmE,gBAC5C9D,EAAKG,SAAS2D,cAAcC,SAASpE,EAAMmE,gBAC3C9D,EAAK0B,MAAMoC,cAAcC,SAASpE,EAAMmE,gBACxC9D,EAAK2B,MAAMoC,SAASpE,MAG/BiB,EAAStD,EAAmBF,EAAoB6D,SAChDL,EAASzD,EAAoBC,MAC9B,CAACwD,EAAUtE,IAGVS,EAA0BkG,aAAuC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAMnG,2BAEpFiH,EAAiBL,uBAAY,WAC/B/C,ENQkC,SAAC7D,GACvC,MAAO,CAACG,KAAM,+BAAgCH,2BMTjCkH,EAA4BlH,MACtC,CAAC6D,EAAU7D,IAId,IADqBkG,aAAuC,SAAAxC,GAAK,OAAIA,EAAMyC,MAAMpG,kBAE7E,OAAO,cAAC,EAAD,IAQX,OAAIE,EACO,cAAC,IAAD,CACHkH,OAAO,MACPC,SAAS,+BACTC,MAAO,cAAC,IAAD,CAAQlH,KAAK,UAAU2B,QATd,WACpB+B,EAASnD,GAAa,IACtBmD,EAASpD,GAAkB,KAOhB,yBAMX,qBAAKmB,MAAO,CAAC0F,QAAS,OAAQC,eAAgB,UAA9C,SACK9H,EACG,cAAC,IAAD,CAAMmC,MAAO,CAAC4F,UAAW,WACzB,gCACI,cAAC,EAAD,CAAa9E,SAAUA,IACvB,cAAC,IAAD,CAAQZ,QAASmF,EAAjB,sBACCjH,EAA0B,cAAC,EAAD,IAAoB,GAC/C,cAAC,IAAD,CAAOyH,WAAYjI,EAAkB4G,QAASA,EAASsB,OAAQ,QAASC,YAAY,EAC7EC,MAAO,SAACC,EAAQC,GACZ,MAAO,CACHhG,QAAS,SAAAiG,GACLlE,ENhC5B,CAAC1D,KAAM,yBAA0B8C,KMgCwB4E,SAIhD,cAAC,EAAD,CAAW5G,gBAAiBtB,EAAiBD,SAAUA,EAC5CE,YAAaA,EAAawC,cAAeA,EACzCd,YAAa,IAEvBxB,EACG,cAAC,EAAD,CAAUoD,SAAUpD,IAClB,SCxKbkI,EAAM,WAEf,OACI,8BACI,cAAC,EAAD,OCKGC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpE,MAAK,YAAkD,IAA/CqE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,iBCLRO,EAAcC,YAAgB,CAChCvC,MT4CwB,WAA8F,IAA7FzC,EAA4F,uDAA7DpE,EAAcqJ,EAA+C,uCACrH,OAAQA,EAAOxI,MACX,IAAK,iBACD,OAAO,2BAAIuD,GAAX,IAAkBnE,UAAWoJ,EAAOpJ,YAExC,IAAK,uBACD,OAAO,2BAAImE,GAAX,IAAkB3D,eAAgB4I,EAAO5I,iBAE7C,IAAK,yBACD,IAAIR,EAAS,YAAOmE,EAAMnE,WAEtBqJ,EAAOD,EAAOtI,oBAAsBsI,EAAOtI,oBAAoBwI,OAAOnF,EAAM9D,YAAc,GAAK8D,EAAMhE,UAAYgE,EAAM9D,YAAc,GAAK8D,EAAMhE,SAAWgE,EAAMhE,UACnKH,EAAUsJ,OAAOnF,EAAM9D,YAAc,GAAK8D,EAAMhE,UAAYgE,EAAM9D,YAAc,GAAK8D,EAAMhE,SAAWgE,EAAMhE,UAC9G,OAAO,2BAAIgE,GAAX,IAAkBlE,iBAAkBoJ,IAExC,IAAK,uBACD,OAAO,2BAAIlF,GAAX,IAAkBjE,eAAgBkJ,EAAOlJ,iBAE7C,IAAK,wBACD,OAAO,2BAAIiE,GAAX,IAAkB/D,gBAAiBgJ,EAAOnI,kBAE9C,IAAK,mBACD,OAAO,2BAAIkD,GAAX,IAAkB9D,YAAa+I,EAAO/I,cAE1C,IAAK,SACD,OAAO,2BAAI8D,GAAX,IAAkB7D,OAAQ8I,EAAO9I,OAAQD,YAAa,IAE1D,IAAK,yBACD,OAAO,2BAAI8D,GAAX,IAAkB5D,iBAAkB6I,EAAO1F,OAE/C,IAAK,+BACD,OAAO,2BAAIS,GAAX,IAAkB1D,wBAAyB2I,EAAO3I,0BAEtD,IAAK,eACD,IAAIkF,EAAoB,CACpBT,GAAIqE,OAAOH,EAAOzD,QAAQT,IAC1BtB,UAAWwF,EAAOzD,QAAQ/B,UAC1BC,SAAUuF,EAAOzD,QAAQ9B,SACzBuB,MAAOgE,EAAOzD,QAAQP,MACtBC,MAAO+D,EAAOzD,QAAQN,MACtBrB,QAAS,CACLC,cAAe,GACfC,KAAM,GACNC,MAAO,GACPC,IAAK,IAETN,YAAa,IAEb0F,EAAY,CAAI7D,GAAJ,mBAAgBxB,EAAMnE,YAClCc,EAAsB0I,EAAaF,OAAOnF,EAAM9D,YAAc,GAAK8D,EAAMhE,UAAYgE,EAAM9D,YAAc,GAAK8D,EAAMhE,SAAWgE,EAAMhE,UACzI,OAAO,2BACAgE,GADP,IACcnE,UAAWwJ,EAAcpJ,gBAAiB+D,EAAM/D,gBAAkB,EAC5EH,iBAAkBa,IAG1B,IAAK,iBACD,OAAO,2BAAIqD,GAAX,IAAkBzD,UAAW0I,EAAOhI,QAExC,QACI,OAAO+C,MSpGNsF,EAAQC,YAAYR,EAAaS,YAAgBC,MCA9DC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACI,cAAC,EAAD,QAGRO,SAASC,eAAe,SAM5BvB,M","file":"static/js/main.4b87862e.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const tableAPI = {\r\n    //Маленький объем данных\r\n    getSmallTable() {\r\n        return axios.get('http://www.filltext.com/?rows=32&id=%7Bnumber%7C1000%7D&firstName=%7BfirstName%7D&lastName=%7BlastName%7D&email=%7Bemail%7D&phone=%7Bphone%7C(xxx)xxx-xx-xx%7D&address=%7BaddressObject%7D&description=%7Blorem%7C32%7D')\r\n    },\r\n    //Большой объем данных\r\n    getBigTable() {\r\n        return axios.get('http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}')\r\n    }\r\n}","import {Dispatch} from 'redux';\r\nimport {tableAPI} from '../api/api';\r\nimport {UserType} from '../components/UsersTable/UsersTable';\r\n\r\ntype SetTableDataType = ReturnType<typeof setTableData>\r\ntype SetIsTableLoadingType = ReturnType<typeof setIsTableLoading>\r\ntype SetTotalUsersCountType = ReturnType<typeof setTotalUsersCount>\r\ntype SetCurrentPageType = ReturnType<typeof setCurrentPage>\r\ntype SetDisplayTableDataType = ReturnType<typeof setDisplayTableData>\r\ntype SearchType = ReturnType<typeof search>\r\ntype SetSelectedUserDataType = ReturnType<typeof setSelectedUserData>\r\ntype SetIsDataSelectedType = ReturnType<typeof setIsDataSelected>\r\ntype AddNewUserType = ReturnType<typeof addNewUser>\r\ntype SetIsAddNewUserFormVisibleType = ReturnType<typeof setIsAddNewUserFormVisible>\r\ntype SetSomeErrorType = ReturnType<typeof setSomeError>\r\n\r\ntype ActionsType =\r\n    SetTableDataType\r\n    | SetIsTableLoadingType\r\n    | SetTotalUsersCountType\r\n    | SetCurrentPageType\r\n    | SetDisplayTableDataType\r\n    | SearchType\r\n    | SetSelectedUserDataType\r\n    | SetIsDataSelectedType\r\n    | AddNewUserType\r\n    | SetIsAddNewUserFormVisibleType\r\n    | SetSomeErrorType\r\nexport type TableReducerStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    //Вся таблица\r\n    tableData: [] as Array<UserType>,\r\n    //Часть таблицы, отображаемая на странице\r\n    displayTableData: [] as Array<UserType>,\r\n    isTableLoading: false,\r\n    pageSize: 50,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    //Строка поиска\r\n    search: '',\r\n    //@ts-ignore выбранный пользователь отображается под таблицей\r\n    selectedUserData: null as UserType,\r\n    //Выбран ли набор данных, загружаемый с сервера (маленький или большой)\r\n    isDataSelected: false,\r\n    isAddNewUserFormVisible: false,\r\n    someError: false\r\n}\r\n\r\nexport const tableReducer = (state: TableReducerStateType = initialState, action: ActionsType): TableReducerStateType => {\r\n    switch (action.type) {\r\n        case 'SET_TABLE_DATA': {\r\n            return {...state, tableData: action.tableData}\r\n        }\r\n        case 'SET_IS_DATA_SELECTED': {\r\n            return {...state, isDataSelected: action.isDataSelected}\r\n        }\r\n        case 'SET_DISPLAY_TABLE_DATA': {\r\n            let tableData = [...state.tableData]\r\n            //Если передаем массив юзеров (только при поиске), то разбиваем на страницы его, если ничего не передаем, то разбиваем на страницы исходный массив данных\r\n            let newD = action.newDisplayTableData ? action.newDisplayTableData.slice((state.currentPage - 1) * state.pageSize, ((state.currentPage - 1) * state.pageSize + state.pageSize))\r\n            : tableData.slice((state.currentPage - 1) * state.pageSize, ((state.currentPage - 1) * state.pageSize + state.pageSize))\r\n            return {...state, displayTableData: newD }\r\n        }\r\n        case 'SET_IS_TABLE_LOADING': {\r\n            return {...state, isTableLoading: action.isTableLoading}\r\n        }\r\n        case 'SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.TotalUsersCount}\r\n        }\r\n        case 'SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SEARCH': {\r\n            return {...state, search: action.search, currentPage: 1}\r\n        }\r\n        case 'SET_SELECTED_USER_DATA': {\r\n            return {...state, selectedUserData: action.user}\r\n        }\r\n        case 'IS_ADD_NEW_USER_FORM_VISIBLE': {\r\n            return {...state, isAddNewUserFormVisible: action.isAddNewUserFormVisible}\r\n        }\r\n        case 'ADD_NEW_USER': {\r\n            let newUser: UserType = {\r\n                id: Number(action.newUser.id),\r\n                firstName: action.newUser.firstName,\r\n                lastName: action.newUser.lastName,\r\n                email: action.newUser.email,\r\n                phone: action.newUser.phone,\r\n                address: {\r\n                    streetAddress: '',\r\n                    city: '',\r\n                    state: '',\r\n                    zip: ''\r\n                },\r\n                description: ''\r\n            }\r\n            let newTableData = [newUser, ...state.tableData]\r\n            let newDisplayTableData = newTableData.slice((state.currentPage - 1) * state.pageSize, ((state.currentPage - 1) * state.pageSize + state.pageSize))\r\n            return {\r\n                ...state, tableData: newTableData, totalUsersCount: state.totalUsersCount + 1,\r\n                displayTableData: newDisplayTableData\r\n            }\r\n        }\r\n        case 'SET_SOME_ERROR': {\r\n            return {...state, someError: action.error}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setTableData = (tableData: Array<UserType>) => {\r\n    return {type: 'SET_TABLE_DATA', tableData} as const\r\n}\r\nexport const setDisplayTableData = (newDisplayTableData?: Array<UserType>) => {\r\n    return {type: 'SET_DISPLAY_TABLE_DATA', newDisplayTableData} as const\r\n}\r\nexport const setIsTableLoading = (isTableLoading: boolean) => {\r\n    return {type: 'SET_IS_TABLE_LOADING', isTableLoading} as const\r\n}\r\nexport const setTotalUsersCount = (TotalUsersCount: number) => {\r\n    return {type: 'SET_TOTAL_USERS_COUNT', TotalUsersCount} as const\r\n}\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {type: 'SET_CURRENT_PAGE', currentPage} as const\r\n}\r\nexport const search = (search: string) => {\r\n    return {type: 'SEARCH', search} as const\r\n}\r\nexport const setSelectedUserData = (user: UserType) => {\r\n    return {type: 'SET_SELECTED_USER_DATA', user} as const\r\n}\r\nexport const setIsDataSelected = (isDataSelected: boolean) => {\r\n    return {type: 'SET_IS_DATA_SELECTED', isDataSelected} as const\r\n}\r\nexport const setIsAddNewUserFormVisible = (isAddNewUserFormVisible: boolean) => {\r\n    return {type: 'IS_ADD_NEW_USER_FORM_VISIBLE', isAddNewUserFormVisible} as const\r\n}\r\n\r\ntype NewUserType = {\r\n    id: string\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    phone: string\r\n}\r\n\r\nexport const addNewUser = (newUser: NewUserType) => {\r\n    return {type: 'ADD_NEW_USER', newUser} as const\r\n}\r\n\r\nexport const setSomeError = (error: boolean) => {\r\n    return {type: 'SET_SOME_ERROR', error} as const\r\n}\r\n\r\nexport const getSmallTableThunkCreator = () => (dispatch: Dispatch) => {\r\n    dispatch(setIsTableLoading(true))\r\n    tableAPI.getSmallTable()\r\n        .then((res) => {\r\n            dispatch(setTableData(res.data))\r\n            dispatch(setTotalUsersCount(res.data.length))\r\n            dispatch(setDisplayTableData())\r\n        })\r\n        .catch((err) => {\r\n            dispatch(setSomeError(true))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsTableLoading(false))\r\n        })\r\n}\r\n\r\nexport const getBigTableThunkCreator = () => (dispatch: Dispatch) => {\r\n    dispatch(setIsTableLoading(true))\r\n    tableAPI.getBigTable()\r\n        .then((res) => {\r\n            dispatch(setTableData(res.data))\r\n            dispatch(setTotalUsersCount(res.data.length))\r\n            dispatch(setDisplayTableData())\r\n        })\r\n        .catch((err) => {\r\n            dispatch(setSomeError(true))\r\n        })\r\n        .finally(() => {\r\n            dispatch(setIsTableLoading(false))\r\n        })\r\n}\r\n\r\n","import React, {useState} from 'react';\r\nimport {Button} from 'antd';\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    portionSize: number\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n//Количество страниц (кнопок)\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize)\r\n//Массив кнопок\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n//Количество отображаемых кнопок в пагинаторе\r\n    let portionCount = Math.ceil(pagesCount / props.portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * props.portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * props.portionSize\r\n\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <Button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}\r\n                    disabled={portionNumber === 1}>Prev\r\n            </Button>\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p, index) =>\r\n                    <Button key={index} type={p === props.currentPage ? 'primary' : 'default'}\r\n                             onClick={() => {\r\n                        props.onPageChanged(p)\r\n                    }}>{p}</Button>\r\n                )}\r\n            <Button onClick={() => {\r\n                setPortionNumber(portionNumber + 1)\r\n            }}\r\n                    disabled={portionNumber === portionCount}>Next\r\n            </Button>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport Search from 'antd/es/input/Search';\r\n\r\ntype TableSearchType = {\r\n    onSearch: (value: string) => void\r\n}\r\n\r\nexport const TableSearch = (props: TableSearchType) => {\r\n\r\n    let [searchText, setSearchText] = useState<string>('')\r\n\r\n    const onSearchInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchText(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Search placeholder=\"Search\" onSearch={props.onSearch}\r\n                    enterButton value={searchText} onChange={onSearchInputChange}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {UserType} from '../UsersTable/UsersTable';\r\n\r\ntype UserInfoType = {\r\n    userData: UserType\r\n}\r\n\r\nexport const UserInfo = (props: UserInfoType) => {\r\n\r\n    let user = {...props.userData}\r\n\r\n    return (\r\n        <div>\r\n            <p>Выбран пользователь <b>{`${user.firstName} ${user.lastName}`}</b></p>\r\n            <p>Описание:</p>\r\n            <p><textarea value={user.description} readOnly></textarea></p>\r\n            <p>Адрес проживания: <b>{user.address.streetAddress}</b></p>\r\n            <p>Город: <b>{user.address.city}</b></p>\r\n            <p>Провинция/штат: <b>{user.address.state}</b></p>\r\n            <p>Индекс: <b>{user.address.zip}</b></p>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {Button} from 'antd';\r\nimport {getBigTableThunkCreator, getSmallTableThunkCreator, setIsDataSelected} from '../../redux/tableReducer';\r\nimport {useDispatch} from 'react-redux';\r\n\r\nexport const DataSelector = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const onSmallBtnClick = () => {\r\n        dispatch(setIsDataSelected(true))\r\n        dispatch(getSmallTableThunkCreator())\r\n    }\r\n    const onBigBtnClick = () => {\r\n        dispatch(setIsDataSelected(true))\r\n        dispatch(getBigTableThunkCreator())\r\n    }\r\n\r\n    return (\r\n        <div style={{textAlign: 'center'}}>\r\n            <p>Select dataset</p>\r\n            <Button onClick={onSmallBtnClick}>Small</Button>\r\n            <Button onClick={onBigBtnClick}>Big</Button>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport {useFormik} from 'formik';\r\nimport {Button, Form, Input} from 'antd';\r\nimport {useDispatch} from 'react-redux';\r\nimport {addNewUser} from '../../redux/tableReducer';\r\n\r\ntype FormValuesType = {\r\n    id: string\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    phone: string\r\n}\r\n\r\nconst validate = (values: FormValuesType) => {\r\n    const errors = {} as FormValuesType;\r\n    if (!values.id) {\r\n        errors.id = 'Required';\r\n    } else if (/\\D/.test(values.id)) {\r\n        errors.id = 'Id should only contain numbers';\r\n    }\r\n\r\n    if (!values.firstName) {\r\n        errors.firstName = 'Required';\r\n    } else if (/[^A-Za-z]/.test(values.firstName)) {\r\n        errors.firstName = 'First name should only contain latin letters';\r\n    }\r\n\r\n    if (!values.lastName) {\r\n        errors.lastName = 'Required';\r\n    } else if (/[^A-Za-z]/.test(values.lastName)) {\r\n        errors.lastName = 'Last name should only contain latin letters';\r\n    }\r\n\r\n    if (!values.email) {\r\n        errors.email = 'Required';\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address';\r\n    }\r\n\r\n    if (!values.phone) {\r\n        errors.phone = 'Required';\r\n    } else if (!/\\(\\d{3}\\)\\d{3}-\\d{4}/.test(values.phone)) {\r\n        errors.phone = 'Phone should be (xxx)xxx-xxxx';\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n\r\nexport const AddNewUserForm = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            id: '',\r\n            firstName: '',\r\n            lastName: '',\r\n            email: '',\r\n            phone: ''\r\n        },\r\n        validate,\r\n        onSubmit: values => {\r\n            dispatch(addNewUser(values))\r\n\r\n        },\r\n    });\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Form onFinish={formik.handleSubmit} layout='horizontal' size='small'>\r\n                <Form.Item label='ID' validateStatus={formik.touched.id && formik.errors.id ? 'error' : ''}>\r\n                    <Input\r\n                        id='id'\r\n                        type='text'\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.id}\r\n                    />\r\n                    {formik.touched.id && formik.errors.id ? <div style={{color: 'red'}}>{formik.errors.id}</div> : null}\r\n                </Form.Item>\r\n                <Form.Item label='First name' validateStatus={formik.touched.firstName && formik.errors.firstName ? 'error' : ''}>\r\n                    <Input\r\n                        id='firstName'\r\n                        type='text'\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.firstName}\r\n                    />\r\n                    {formik.touched.firstName && formik.errors.firstName ? <div style={{color: 'red'}}>{formik.errors.firstName}</div> : null}\r\n                </Form.Item>\r\n                <Form.Item label='Last name' validateStatus={formik.touched.lastName && formik.errors.lastName ? 'error' : ''}>\r\n                    <Input\r\n                        id='lastName'\r\n                        type='text'\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.lastName}\r\n                    />\r\n                    {formik.touched.lastName && formik.errors.lastName ? <div style={{color: 'red'}}>{formik.errors.lastName}</div> : null}\r\n                </Form.Item>\r\n                <Form.Item label='Email' validateStatus={formik.touched.email && formik.errors.email ? 'error' : ''}>\r\n                    <Input\r\n                        id='email'\r\n                        type='email'\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.email}\r\n                    />\r\n                    {formik.touched.email && formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                </Form.Item>\r\n                <Form.Item label='Phone' validateStatus={formik.touched.phone && formik.errors.phone ? 'error' : ''}>\r\n                    <Input\r\n                        id='phone'\r\n                        type='text'\r\n                        onChange={formik.handleChange}\r\n                        onBlur={formik.handleBlur}\r\n                        value={formik.values.phone}\r\n                    />\r\n                    {formik.touched.phone && formik.errors.phone ? <div style={{color: 'red'}}>{formik.errors.phone}</div> : null}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type='primary' htmlType='submit' disabled={!formik.isValid}>Add</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import {Button, Result, Spin, Table} from 'antd';\r\nimport React, {useCallback} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {\r\n    search,\r\n    setCurrentPage,\r\n    setDisplayTableData, setIsAddNewUserFormVisible, setIsDataSelected, setSelectedUserData, setSomeError,\r\n    setTotalUsersCount\r\n} from '../../redux/tableReducer';\r\nimport {AppRootStateType} from '../../redux/redux-store';\r\nimport {Paginator} from '../Paginator/Paginator';\r\nimport {TableSearch} from '../Search/TableSearch';\r\nimport {UserInfo} from '../UserInfo/UserInfo';\r\nimport {DataSelector} from '../DataSelector/DataSelector';\r\nimport {AddNewUserForm} from '../AddNewUserForm/AddNewUserForm';\r\n\r\ntype AddressType = {\r\n    streetAddress: string\r\n    city: string\r\n    state: string\r\n    zip: string\r\n}\r\n\r\nexport type UserType = {\r\n    id: number\r\n    firstName: string\r\n    lastName: string\r\n    email: string\r\n    phone: string\r\n    address: AddressType\r\n    description: string\r\n}\r\n\r\n\r\nexport const UsersTable = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    let someError = useSelector<AppRootStateType, boolean>(state => state.table.someError)\r\n\r\n//Если таблица загружается, показывается крутилка\r\n    let isTableLoading = useSelector<AppRootStateType, boolean>(state => state.table.isTableLoading)\r\n\r\n//Данные для таблицы (пропсы AntDesign)\r\n    let tableData = useSelector<AppRootStateType, Array<UserType>>(state => state.table.tableData)\r\n    const columns = [\r\n        {\r\n            title: 'ID',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            sorter: (a: UserType, b: UserType) => a.id - b.id,\r\n        },\r\n        {\r\n            title: 'First name',\r\n            dataIndex: 'firstName',\r\n            key: 'firstName',\r\n            sorter: (a: UserType, b: UserType) => {\r\n                return stringSorterFunction(a.firstName, b.firstName)\r\n            }\r\n        },\r\n        {\r\n            title: 'Last name',\r\n            dataIndex: 'lastName',\r\n            key: 'lastName',\r\n            sorter: (a: UserType, b: UserType) => {\r\n                return stringSorterFunction(a.lastName, b.lastName)\r\n            }\r\n        },\r\n        {\r\n            title: 'Email',\r\n            dataIndex: 'email',\r\n            key: 'email',\r\n            sorter: (a: UserType, b: UserType) => {\r\n                return stringSorterFunction(a.email, b.email)\r\n            }\r\n        },\r\n        {\r\n            title: 'Phone',\r\n            dataIndex: 'phone',\r\n            key: 'phone',\r\n            sorter: (a: UserType, b: UserType) => {\r\n                return stringSorterFunction(a.phone, b.phone)\r\n            }\r\n        },\r\n    ]\r\n//Отображаемые строки таблицы (максимум 50)\r\n    let displayTableData = useSelector<AppRootStateType, Array<UserType>>(state => state.table.displayTableData)\r\n//Даные для рассчета кнопок пагинации\r\n    let totalUsersCount = useSelector<AppRootStateType, number>(state => state.table.totalUsersCount)\r\n    let pageSize = useSelector<AppRootStateType, number>(state => state.table.pageSize)\r\n    let currentPage = useSelector<AppRootStateType, number>(state => state.table.currentPage)\r\n//Выбранный пользователь (отображается внизу таблицы)\r\n    let selectedUserData = useSelector<AppRootStateType, UserType>(state => state.table.selectedUserData)\r\n\r\n//Сортировка с помощью метода массива sort\r\n    const stringSorterFunction = (a: string, b: string) => {\r\n        if (a > b) {\r\n            return 1;\r\n        }\r\n        if (a < b) {\r\n            return -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n//При нажатии на кнопку страницы пагинатора\r\n    const onPageChanged = useCallback((pageNumber: number) => {\r\n        dispatch(setCurrentPage(pageNumber))\r\n        dispatch(setDisplayTableData())\r\n    }, [dispatch])\r\n\r\n//Фильтрация по подстроке при нажатии на поиск\r\n    const onSearch = useCallback((value: string) => {\r\n        dispatch(search(value))\r\n        let newDisplayTableData = tableData.filter(user => {\r\n            return user.firstName.toLowerCase().includes(value.toLowerCase())\r\n                || user.lastName.toLowerCase().includes(value.toLowerCase())\r\n                || user.email.toLowerCase().includes(value.toLowerCase())\r\n                || user.phone.includes(value)\r\n        })\r\n        //Изменение количества пользователей(строк таблицы) для пересчета кнопок в пагинации\r\n        dispatch(setTotalUsersCount(newDisplayTableData.length))\r\n        dispatch(setDisplayTableData(newDisplayTableData))\r\n    }, [dispatch, tableData])\r\n\r\n//Форма для добавления новой строки показывается по нажатию кнопки\r\n    let isAddNewUserFormVisible = useSelector<AppRootStateType, boolean>(state => state.table.isAddNewUserFormVisible)\r\n\r\n    const onAddUserClick = useCallback(() => {\r\n        dispatch(setIsAddNewUserFormVisible(!isAddNewUserFormVisible))\r\n    }, [dispatch, isAddNewUserFormVisible])\r\n\r\n//Таблица отображается только после выбора набора данных\r\n    let isDataSelected = useSelector<AppRootStateType, boolean>(state => state.table.isDataSelected)\r\n    if (!isDataSelected) {\r\n        return <DataSelector/>\r\n    }\r\n\r\n    const onBackHomeClick = () => {\r\n        dispatch(setSomeError(false))\r\n        dispatch(setIsDataSelected(false))\r\n    }\r\n\r\n    if (someError) {\r\n        return <Result\r\n            status=\"500\"\r\n            subTitle=\"Sorry, something went wrong.\"\r\n            extra={<Button type=\"primary\" onClick={onBackHomeClick}>Back Home</Button>}\r\n        />\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{display: 'flex', justifyContent: 'center'}}>\r\n            {isTableLoading ?\r\n                <Spin style={{marginTop: '100px'}}/> :\r\n                <div>\r\n                    <TableSearch onSearch={onSearch}/>\r\n                    <Button onClick={onAddUserClick}>Add User</Button>\r\n                    {isAddNewUserFormVisible ? <AddNewUserForm/> : ''}\r\n                    <Table dataSource={displayTableData} columns={columns} rowKey={'phone'} pagination={false}\r\n                           onRow={(record, rowIndex) => {\r\n                               return {\r\n                                   onClick: event => {\r\n                                       dispatch(setSelectedUserData(record))\r\n                                   },\r\n                               };\r\n                           }}/>\r\n                    <Paginator totalItemsCount={totalUsersCount} pageSize={pageSize}\r\n                               currentPage={currentPage} onPageChanged={onPageChanged}\r\n                               portionSize={5}\r\n                    />\r\n                    {selectedUserData ?\r\n                        <UserInfo userData={selectedUserData}/>\r\n                        : ''\r\n                    }\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport {UsersTable} from './components/UsersTable/UsersTable';\n\nexport const App = () => {\n\n    return (\n        <div>\n            <UsersTable />\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tableReducer} from './tableReducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    table: tableReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/redux-store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}